// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  tenantadmin
  admin
}

enum AccessType {
  VIEW
  DOWNLOAD
}

model File {
  id         Int      @id @default(autoincrement())
  filename   String
  url        String
  size       Int
  mimetype   String
  uploadedAt DateTime @default(now())
  uploaderIp String

  // NEW (nullable başlayalım, sonra doldururuz)
  container  String?   // azure container adı
  blobName   String?   // container içindeki yol/dosya adı (path)

  views     Int      @default(0)
  downloads Int      @default(0)

  userId   Int
  user     user    @relation(fields: [userId], references: [id])

  tenantId Int
  tenant   Tenant  @relation(fields: [tenantId], references: [id])

  accessLogs AccessLog[]
  videos    Video[]

  @@map("file")
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  filename    String
  url         String
  size        Int
  duration    Float?
  format      String?
  resolution  String?
  uploadedAt  DateTime @default(now())
  fileId      Int
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tenantId    Int?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  uploadedBy  Int?
  user        user?    @relation("UserVideos", fields: [uploadedBy], references: [id])

  // NEW:
  thumbnailUrl String?
}

model AccessLog {
  id         Int         @id @default(autoincrement())
  file       File        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId     Int
  type       AccessType
  userId     Int?
  user       user?       @relation("UserAccessLogs", fields: [userId], references: [id]) // <- İSİMLİ İLİŞKİ
  accessedAt DateTime    @default(now())
  ipAddress  String?
  userAgent  String?

  @@index([fileId, type, accessedAt])
  @@map("access_log")
}

model user {
  id        Int      @id @default(autoincrement())
  name      String?
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())

  tenantId  Int?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  files     File[]
  videos    Video[]  @relation("UserVideos")

  // NEW: AccessLog inverse relation
  accessLogs AccessLog[] @relation("UserAccessLogs")
}

model Tenant {
  id     Int    @id @default(autoincrement())
  name   String
  users  user[]
  files  File[]
  videos Video[]
}